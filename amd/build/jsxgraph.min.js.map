{"version":3,"file":"jsxgraph.min.js","sources":["../src/jsxgraph.js"],"sourcesContent":["define([\"qtype_stack/jsxgraphcore-lazy\"], function(JXG) {\n    // 4.4 rewrite, now with groups and ability to mark as moved.\n    // Should perform better and have less listeners.\n\n    // Functions that generate the value for an input. By input then  by object.\n    var serializers = {};\n\n    // Functions that extract values from inputs. Lists of them by input.\n    // Single argument functions taking the value of the input.\n    var deserializers = {};\n\n    // Initial values for input serialisations before restore, if an object set of an input\n    // serialises to something else this value will be nulled otherwise if the values match\n    // the input won't get updated.\n    var initials = {};\n\n    // Object groups, if any of these objects moves consider others to have moved as well.\n    // Moving an object only considers those groups the object itself belongs to touching\n    // \"part A\" does not cascade to \"part B\" if they overlap unless the moved thing is in\n    // the intersection.\n    var objectgroups = [];\n\n    // Object input mappings. Which inputs tie to this object. Object.id to lists of inputs.\n    var objectinput = {};\n\n    // Internal tally of objects that have been registered and do not need to be registered again.\n    var registeredobjects = {};\n\n    // Flag to stop propagation.\n    var active = false;\n\n    /**\n     * Setup function for linking JSXGraph to STACK questions.\n     * @param {String} inputname\n     */\n    function _commonsetup(inputname) {\n        if (!(inputname in serializers)) {\n            serializers[inputname] = {};\n            deserializers[inputname] = [];\n\n            var input = document.getElementById(inputname);\n            input.addEventListener('input', () => generalinputupdatehandler(inputname));\n            input.addEventListener('change', () => generalinputupdatehandler(inputname));\n            input.addEventListener('change', function() {\n                M.core_formchangechecker.set_form_changed();\n            });\n        }\n    }\n\n    /**\n     * Add an object to the register of those we keep track of the state.\n     * @param {Object} object\n     */\n    function registerobject(object) {\n        if (!(object.id in registeredobjects)) {\n            object.board.on('update', () => generalobjectupdatehandlerid(object.id));\n            registeredobjects[object.id] = object;\n        }\n    }\n\n    /**\n     * Serialise a point.\n     * @param {JXG.Point} point\n     * @returns {String}\n     */\n    function pointserializer(point) {\n        return JSON.stringify([point.X(), point.Y()]);\n    }\n\n    /**\n     * De-serialise a point.\n     * @param {JXG.Point} point\n     * @param {String} data\n     */\n    function pointdeserializer(point, data) {\n        try {\n            var tmp = JSON.parse(data);\n            if (typeof tmp[0] == 'number' && typeof tmp[1] == 'number') {\n                point.setPosition(JXG.COORDS_BY_USER, tmp);\n                point.board.update();\n                point.update();\n            }\n        } catch (err) {\n            // We do not care about this. What could we even do?\n        }\n    }\n\n    /**\n     * De-serialise a point for cases where we have already parsed that.\n     * @param {JXG.Point} point\n     * @param {Array} data\n     */\n    function pointdeserializerparsed(point, data) {\n        try {\n            if (typeof data[0] == 'number' && typeof data[1] == 'number') {\n                point.setPosition(JXG.COORDS_BY_USER, data);\n                point.board.update();\n                point.update();\n            }\n        } catch (err) {\n            // We do not care about this. What could we even do?\n        }\n    }\n\n    /**\n     * Serialise a slider.\n     * @param {JXG.Slider} slider\n     * @returns {String}\n     */\n    function sliderserializer(slider) {\n        return JSON.stringify(slider.Value());\n    }\n\n    /**\n     * De-serialise a slider.\n     * @param {JXG.Slider} slider\n     * @param {String} data\n     */\n    function sliderdeserializer(slider, data) {\n        try {\n            slider.setValue(JSON.parse(data));\n            slider.board.update();\n            slider.update();\n        } catch (err) {\n            // We do not care about this.\n        }\n    }\n\n    /**\n     * Wrapper function for general object handler.\n     * @param {Object} object\n     */\n    function generalobjectupdatehandler(object) {\n        generalobjectupdatehandlerid(object.id);\n    }\n\n    /**\n     * General object handler.\n     * @param {String} id\n     */\n    function generalobjectupdatehandlerid(id) {\n        if (!active) {\n            active = true;\n            try {\n                var handledinputs = [];\n                if (id in objectinput) {\n                    for (var i = 0; i < objectinput[id].length; i++) {\n                        var inputname = objectinput[id][i];\n                        if (handledinputs.indexOf(inputname) === -1) {\n                            handledinputs.push(inputname);\n                            var input = document.getElementById(inputname);\n                            var val = serializers[inputname][id]();\n                            if (val !== initials[inputname]) {\n                                initials[inputname] = null;\n                                input.value = val;\n                            } else {\n                                // Exit.\n                                active = false;\n                                return;\n                            }\n                        }\n                    }\n                }\n                // Update groups at the same time. Here the initial value matters not a bit.\n                for (var gi = 0; gi < objectgroups.length; gi++) {\n                    var group = objectgroups[gi];\n                    if (group.indexOf(id) !== -1) {\n                        for (var gt = 0; gt < group.length; gt++) {\n                            var obj = group[gt];\n                            if (obj !== id) {\n                                if (obj in objectinput) {\n                                    for (var i = 0; i < objectinput[obj].length; i++) {\n                                        var inputname = objectinput[obj][i];\n                                        if (handledinputs.indexOf(inputname) === -1) {\n                                            initials[inputname] = null;\n                                            handledinputs.push(inputname);\n                                            var input = document.getElementById(inputname);\n                                            input.value = serializers[inputname][obj]();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < handledinputs.length; i++) {\n                    var input = document.getElementById(handledinputs[i]);\n                    if (window.location.pathname.indexOf('preview.php') === -1) {\n                        var e = new Event('change');\n                        input.dispatchEvent(e);\n                    }\n                    var e = new Event('input');\n                    input.dispatchEvent(e);\n                }\n            } catch (err) {\n                // If there is an error there we want to reset active anyway.\n                // Might be that some serializer explodes if some scripting\n                // messes with things.\n            }\n            active = false;\n        }\n    }\n\n    /**\n     * Handles updates to inputs coming from outside.\n     * @param {String} inputname\n     */\n    function generalinputupdatehandler(inputname) {\n        if (inputname in deserializers) {\n            // Only trigger everything if the value has truly changed.\n            // Check all the objects serializing to this input. Note that\n            // some of them may exist in different graphs.\n            var input = document.getElementById(inputname);\n            var keys = Object.keys(serializers[inputname]);\n            var ok = false;\n            for (var i = 0; i < keys.length; i++) {\n                var old = serializers[inputname][keys[i]]();\n                if (old !== input.value) {\n                    ok = true;\n                    i = keys.length + 1;\n                }\n            }\n\n            if (ok) {\n                // And yes we trigger everything as we do not actually\n                // keep track of the ones that truly need to be triggered.\n                // But this is fast and converges in a few iterations.\n                for (var i = 0; i < deserializers[inputname].length; i++) {\n                    deserializers[inputname][i](input.value);\n                }\n            }\n        }\n    }\n\n    return {\n            find_input_id: function(divid, name) {\n                // Note this is here for compatibility and for documentation.\n                // Not used since CASText2.\n                var tmp = document.getElementById(divid);\n                while ((tmp = tmp.parentElement) &&\n                       !(tmp.classList.contains(\"formulation\") &&\n                       tmp.parentElement.classList.contains(\"content\"))) {}\n                tmp = tmp.querySelector('input[id$=\"_' + name + '\"]');\n                // We use this function to also tie into the change tracking of Moodle.\n                // We do it here so that all possible code written by authors will also be tracked.\n                // The author just needst to generate a change event they do not need to know how the VLE works.\n                tmp.addEventListener('change', function() {\n                    M.core_formchangechecker.set_form_changed();\n                });\n                return tmp.id;\n            },\n\n            define_group: function(list) {\n                // Moving any of these objects (points sliders) leads to all of them\n                // being considered moved.\n                var l = [];\n                for (var i = 0; i < list.length; i++) {\n                    if (l.indexOf(list[i].id) === -1) {\n                        l.push(list[i].id);\n                    }\n                }\n                objectgroups.push(l);\n            },\n\n            starts_moved: function(obj) {\n                // Makes this object start its life as moved.\n                // Call after bindings have been defined and possible groups declared.\n                if (obj.id in objectinput) {\n                    for (var i = 0; i < objectinput[obj.id].length; i++) {\n                        initials[objectinput[obj.id][i]] = null;\n                    }\n                    // This is nto a registration of the update handler\n                    // we actually force call it.\n                    generalobjectupdatehandler(obj);\n                }\n            },\n\n\n            custom_bind: function(input, serializer, deserializer, objects) {\n                // Allows one to define a custom binding using whatever\n                // serialization one wishes.\n                _commonsetup(input);\n\n                // Initialse the initial value store.\n                initials[input] = serializer();\n\n                var theInput = document.getElementById(input);\n                // If a value is already in the input restore it.\n                if (theInput.value && theInput.value != '') {\n                    deserializer(theInput.value);\n                }\n\n                // Register this as a normal deserialiser for this input.\n                deserializers[input].push(deserializer);\n\n                // For each of these objects make the erialsier from them to\n                // the input as the one defined.\n                // Also build the map of objects to inputs and register for update tracking.\n                for (var i = 0; i < objects.length; i++) {\n                    this.register_object(input, objects[i], serializer);\n                }\n            },\n\n            register_object: function(input, object, serializer) {\n                // For when you need to declare a new object that was not there during\n                // the initial binding.\n                if (object.id in objectinput) {\n                    if (!(input in objectinput[object.id])) {\n                        objectinput[object.id].push(input);\n                    }\n                } else {\n                    objectinput[object.id] = [input];\n                }\n                serializers[input][object.id] = serializer;\n\n                registerobject(object);\n            },\n\n            bind_point: function(inputRef, point) {\n                var serializer = () => pointserializer(point);\n                var deserializer = (value) => pointdeserializer(point, value);\n\n                this.custom_bind(inputRef, serializer, deserializer, [point]);\n            },\n\n            bind_point_dual: function(inputRef, p1, p2) {\n                var serializer = () => {\n                    return JSON.stringify([[p1.X(),p1.Y()],[p2.X(),p2.Y()]]);\n                };\n\n                var deserializer = (value) => {\n                    var tmp = JSON.parse(value);\n                    pointdeserializerparsed(p1, tmp[0]);\n                    pointdeserializerparsed(p2, tmp[1]);\n                };\n\n                this.custom_bind(inputRef, serializer, deserializer, [p1, p2]);\n            },\n\n            bind_point_relative: function(inputRef, p1, p2) {\n                var serializer = () => {\n                    return JSON.stringify([[p1.X(),p1.Y()],[p2.X()-p1.X(),p2.Y()-p1.Y()]]);\n                };\n\n                var deserializer = (value) => {\n                    var tmp = JSON.parse(value);\n                    pointdeserializerparsed(p1, tmp[0]);\n                    tmp[1][0] = tmp[1][0] + tmp[0][0];\n                    tmp[1][1] = tmp[1][1] + tmp[0][1];\n                    pointdeserializerparsed(p2, tmp[1]);\n                };\n\n                this.custom_bind(inputRef, serializer, deserializer, [p1, p2]);\n            },\n\n            bind_point_direction: function(inputRef, p1, p2) {\n                var serializer = () => {\n                    return JSON.stringify([[p1.X(),p1.Y()],[Math.atan2(p2.Y()-p1.Y(),p2.X()-p1.X()),\n                        Math.sqrt((p2.X()-p1.X())*(p2.X()-p1.X())+(p2.Y()-p1.Y())*(p2.Y()-p1.Y()))]]);\n                };\n\n                var deserializer = (value) => {\n                    var tmp = JSON.parse(value);\n                    pointdeserializerparsed(p1, tmp[0]);\n                    var angle = tmp[1][0];\n                    var len = tmp[1][1];\n                    tmp[1][0] = tmp[0][0] + len*Math.cos(angle);\n                    tmp[1][1] = tmp[0][1] + len*Math.sin(angle);\n                    pointdeserializerparsed(p2, tmp[1]);\n                };\n\n                this.custom_bind(inputRef, serializer, deserializer, [p1, p2]);\n            },\n\n            bind_slider: function(inputRef, slider) {\n                var serializer = () => sliderserializer(slider);\n                var deserializer = (value) => sliderdeserializer(slider, value);\n\n                this.custom_bind(inputRef, serializer, deserializer, [slider]);\n            },\n\n            bind_list_of: function(inputRef, list_of_objects) {\n                var serializer = () => {\n                    var r =  '[';\n                    for (var i = 0; i < list_of_objects.length; i++) {\n                        var obj = list_of_objects[i];\n                        if (obj.getType() === 'slider') {\n                            r = r + JSON.stringify(obj.Value()) + ',';\n                        } else {\n                            // Assume all else to be points.\n                            r = r + pointserializer(obj) + ',';\n                        }\n                    }\n                    r = r.substring(0, r.length - 1);\n                    return r + ']';\n                };\n\n                var deserializer = (value) => {\n                    var tmp = JSON.parse(value);\n                    for (var i = 0; (i < list_of_objects.length && i < tmp.length); i++) {\n                        var obj = list_of_objects[i];\n                        if (obj.getType() === 'slider') {\n                            obj.setValue(tmp[i]);\n                        } else {\n                            pointdeserializerparsed(obj, tmp[i]);\n                        }\n                    }\n                };\n\n                this.custom_bind(inputRef, serializer, deserializer, list_of_objects);\n            }\n        };\n    });\n"],"names":["define","JXG","serializers","deserializers","initials","objectgroups","objectinput","registeredobjects","active","pointserializer","point","JSON","stringify","X","Y","pointdeserializerparsed","data","setPosition","COORDS_BY_USER","board","update","err","generalobjectupdatehandlerid","id","handledinputs","i","length","inputname","indexOf","push","input","document","getElementById","val","value","gi","group","gt","obj","window","location","pathname","e","Event","dispatchEvent","generalinputupdatehandler","keys","Object","ok","find_input_id","divid","name","tmp","parentElement","classList","contains","querySelector","addEventListener","M","core_formchangechecker","set_form_changed","define_group","list","l","starts_moved","custom_bind","serializer","deserializer","objects","_commonsetup","theInput","register_object","object","on","registerobject","bind_point","inputRef","parse","pointdeserializer","bind_point_dual","p1","p2","bind_point_relative","bind_point_direction","Math","atan2","sqrt","angle","len","cos","sin","bind_slider","slider","Value","sliderserializer","setValue","sliderdeserializer","bind_list_of","list_of_objects","r","getType","substring"],"mappings":"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"}